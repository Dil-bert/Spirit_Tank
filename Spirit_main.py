# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Spirit_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import io
import sys
import fcntl
import time
import copy
import string
import re
import pickle


from datetime import*
from tempControl import*
from phControl import*
from LED_PWM import*
from i2c import*
from distance_sensor import*

import RPi.GPIO as GPIO                    #Import GPIO library
import time

from PyQt5 import QtCore, QtGui, QtWidgets

def fill_tank(device_list, full_distance):
    fill_distance = read_distance()
    while (fill_distance > full_distance):
        ### PUMPING
        send_pumpValue(1,device_list)
        time.sleep(1.5)
        fill_distance = read_distance()
    ### FULL
    return

def deviceStr2Float(deviceString): #converts device response strings to float values
    #   Parses the device response, produces a list with the string for the decimal value reading, 
    #Converts the string to a floating point value and prints it out.
    deviceReading = re.findall(r"[-+]?\d*\.\d+", deviceString)
    deviceReading = str(''.join(deviceReading))
    deviceValue = float(deviceReading)
    return deviceValue 

def send_pumpValue(volume, device_list):
    addr = 103
    available = False
    
    distance = read_distance()
    print ("Distance from sensor is:", distance,"cm")
    for i in device_list:
        if(i.address == int(addr)):
            device = i
            available = True
    if(available):
        deviceReturn = device.query("D,9")
        return
        
    else:
        print("Sensor is not available")
        return

def getDeviceValue(addr, device_list): #returns float device value
    # go through the devices to figure out if its available
    # and send command to it if it is
    available = False
    for i in device_list:
        if(i.address == int(addr)):
            device = i
            available = True
    if(available):
        deviceReturn = device.query("R")
        return deviceStr2Float(deviceReturn)
        
    else:
        return -1
        
def tempScaleSet(scale, addr, device_list):
    ##scale must be either "c" "k" or "f"
    # go through the devices to figure out if its available
    # and send command to it if it is
    available = False
    for i in device_list:
        if(i.address == int(addr)):
            device = i
            available = True
    if(available):
        deviceReturn = device.query(f'S, {scale}')
        return deviceReturn
        
    else:
        print('Sensor is not available')
        return -1


### Use when an unsafe event occurs in order to give a time of last
###     unsafe event occurance.
def unsafe_state(safe_bool):
    try:
        unsafe_state_log = open('UnsafeState.dat', 'wb')
        pickle.dump(datetime.now(),unsafe_state_log)
        unsafe_state_log.close()
    except IOError:
        print('Error writing to UnsafeState.dat')
    finally:
        safe_bool = False
        return safe_bool
        



def safe_state_progress(safe_bool):
    delta = timedelta(
    days=0,
    seconds=60,
    microseconds=0,
    milliseconds=0,
    minutes=0,
    hours=0,
    weeks=0)
    
    try:
        unsafe_state_log = open("UnsafeState.dat", "rb")
        last_unsafe_time = pickle.load(unsafe_state_log)
        unsafe_state_log.close()
        time_in_safe_range = datetime.now() - last_unsafe_time
        if time_in_safe_range > delta:
            safe_bool = True
        else:
            safe_bool = False
        
    except IOError:
        print('Critical Error reading UnsafeState.dat \n')
        print('UnsafeState.dat will be created and set to unsafe \n')
        print('Bug report requested \n')
        safe_bool = unsafe_state(safe_bool)
    finally:
        if (safe_bool):
            temp = -1
        else:
            temp = time_in_safe_range.seconds
        return temp


class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(545, 464)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/images/ST_v4 icon transparent small.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_main_logo = QtWidgets.QLabel(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_main_logo.sizePolicy().hasHeightForWidth())
        self.label_main_logo.setSizePolicy(sizePolicy)
        self.label_main_logo.setMinimumSize(QtCore.QSize(10, 60))
        self.label_main_logo.setText("")
        self.label_main_logo.setPixmap(QtGui.QPixmap(":/images/images/CropTopST Blue words.png"))
        self.label_main_logo.setScaledContents(True)
        self.label_main_logo.setObjectName("label_main_logo")
        self.gridLayout_2.addWidget(self.label_main_logo, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.frame_3)
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_ph = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_ph.sizePolicy().hasHeightForWidth())
        self.label_ph.setSizePolicy(sizePolicy)
        self.label_ph.setObjectName("label_ph")
        self.gridLayout_3.addWidget(self.label_ph, 1, 0, 1, 1)
        self.dispense_button = QtWidgets.QPushButton(self.frame_2)
        self.dispense_button.setMinimumSize(QtCore.QSize(0, 60))
        self.dispense_button.setMaximumSize(QtCore.QSize(16777215, 60))
        self.dispense_button.setObjectName("dispense_button")
        self.gridLayout_3.addWidget(self.dispense_button, 4, 1, 1, 1)
        self.temp_text_out = QtWidgets.QPlainTextEdit(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.temp_text_out.sizePolicy().hasHeightForWidth())
        self.temp_text_out.setSizePolicy(sizePolicy)
        self.temp_text_out.setMinimumSize(QtCore.QSize(60, 30))
        self.temp_text_out.setMaximumSize(QtCore.QSize(16777215, 30))
        self.temp_text_out.setReadOnly(True)
        self.temp_text_out.setObjectName("temp_text_out")
        self.gridLayout_3.addWidget(self.temp_text_out, 0, 1, 1, 1)
        self.comboBox_temp = QtWidgets.QComboBox(self.frame_2)
        self.comboBox_temp.setMinimumSize(QtCore.QSize(128, 0))
        self.comboBox_temp.setMaximumSize(QtCore.QSize(128, 16777215))
        self.comboBox_temp.setObjectName("comboBox_temp")
        self.comboBox_temp.addItem("")
        self.comboBox_temp.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_temp, 0, 2, 1, 1)
        self.label_temp = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_temp.sizePolicy().hasHeightForWidth())
        self.label_temp.setSizePolicy(sizePolicy)
        self.label_temp.setObjectName("label_temp")
        self.gridLayout_3.addWidget(self.label_temp, 0, 0, 1, 1)
        self.ph_text_out = QtWidgets.QPlainTextEdit(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ph_text_out.sizePolicy().hasHeightForWidth())
        self.ph_text_out.setSizePolicy(sizePolicy)
        self.ph_text_out.setMinimumSize(QtCore.QSize(60, 30))
        self.ph_text_out.setMaximumSize(QtCore.QSize(16777215, 30))
        self.ph_text_out.setReadOnly(True)
        self.ph_text_out.setObjectName("ph_text_out")
        self.gridLayout_3.addWidget(self.ph_text_out, 1, 1, 1, 1)
        self.label_safe = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_safe.sizePolicy().hasHeightForWidth())
        self.label_safe.setSizePolicy(sizePolicy)
        self.label_safe.setObjectName("label_safe")
        self.gridLayout_3.addWidget(self.label_safe, 3, 0, 1, 1)
        self.safe_state_text_out = QtWidgets.QPlainTextEdit(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.safe_state_text_out.sizePolicy().hasHeightForWidth())
        self.safe_state_text_out.setSizePolicy(sizePolicy)
        self.safe_state_text_out.setMinimumSize(QtCore.QSize(60, 30))
        self.safe_state_text_out.setMaximumSize(QtCore.QSize(16777215, 30))
        self.safe_state_text_out.setReadOnly(True)
        self.safe_state_text_out.setObjectName("safe_state_text_out")
        self.gridLayout_3.addWidget(self.safe_state_text_out, 3, 1, 1, 1)
        self.label_co2 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_co2.sizePolicy().hasHeightForWidth())
        self.label_co2.setSizePolicy(sizePolicy)
        self.label_co2.setObjectName("label_co2")
        self.gridLayout_3.addWidget(self.label_co2, 2, 0, 1, 1)
        self.co2_text_out = QtWidgets.QPlainTextEdit(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.co2_text_out.sizePolicy().hasHeightForWidth())
        self.co2_text_out.setSizePolicy(sizePolicy)
        self.co2_text_out.setMinimumSize(QtCore.QSize(60, 30))
        self.co2_text_out.setMaximumSize(QtCore.QSize(16777215, 30))
        self.co2_text_out.setReadOnly(True)
        self.co2_text_out.setObjectName("co2_text_out")
        self.gridLayout_3.addWidget(self.co2_text_out, 2, 1, 1, 1)
        self.safe_state_progress_bar = QtWidgets.QProgressBar(self.frame_2)
        self.safe_state_progress_bar.setProperty("value", 24)
        self.safe_state_progress_bar.setObjectName("safe_state_progress_bar")
        self.gridLayout_3.addWidget(self.safe_state_progress_bar, 3, 2, 1, 1)
        self.verticalLayout.addWidget(self.frame_2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 545, 24))
        self.menubar.setObjectName("menubar")
        self.menuViews = QtWidgets.QMenu(self.menubar)
        self.menuViews.setObjectName("menuViews")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionTank_Setup = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/images/images/034-settings.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTank_Setup.setIcon(icon1)
        self.actionTank_Setup.setObjectName("actionTank_Setup")
        self.actionShutdown = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/images/images/009-power button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShutdown.setIcon(icon2)
        self.actionShutdown.setObjectName("actionShutdown")
        self.actionGraphs = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/images/images/045-image.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGraphs.setIcon(icon3)
        self.actionGraphs.setObjectName("actionGraphs")
        self.actionLights = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/images/images/020-brightness.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLights.setIcon(icon4)
        self.actionLights.setObjectName("actionLights")
        self.actionMain = QtWidgets.QAction(MainWindow)
        self.actionMain.setObjectName("actionMain")
        self.actionCulture_Status = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/images/images/048-chat bubble.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCulture_Status.setIcon(icon5)
        self.actionCulture_Status.setObjectName("actionCulture_Status")
        self.menuViews.addAction(self.actionGraphs)
        self.menuViews.addAction(self.actionCulture_Status)
        self.menuSettings.addAction(self.actionShutdown)
        self.menuSettings.addAction(self.actionLights)
        self.menuSettings.addAction(self.actionTank_Setup)
        self.menubar.addAction(self.menuViews.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.updateValues)
        timer.start(15000)
        
        self.comboBox_temp.currentIndexChanged.connect(self.updateTempScale)
        
    def updateValues(self):
        safe_bool = False
        ## Tempature update
        temp_value = getDeviceValue(TEMP_ADDR, device_list)
        temp_out = str(temp_value)
        self.temp_text_out.clear()
        self.temp_text_out.insertPlainText(temp_out)
        if temp_value < TEMP_MIN:
            unsafe_state(safe_bool)
        ## PH update
        ph_value = getDeviceValue(PH_ADDR, device_list)
        ph_out = str(ph_value)
        self.ph_text_out.clear()
        self.ph_text_out.insertPlainText(ph_out)
        if ph_value < PH_DANGER:
            unsafe_state(safe_bool)
        ## Water level update
        distance = read_distance()
        water_level = TANK_HEIGHT - distance
        level_out = str(water_level)
        self.co2_text_out.clear()
        self.co2_text_out.insertPlainText(f'{water_level} cm')
        ## Safe State and progress bar
        temp = safe_state_progress(safe_bool)
        if (temp == -1):
            safe_bool = True
            self.safe_state_text_out.clear()
            self.safe_state_text_out.insertPlainText("SAFE")
            self.safe_state_progress_bar.setValue(100)
        else:
            safe_bool = False
            self.safe_state_text_out.clear()
            self.safe_state_text_out.insertPlainText("DANGER WILL ROBINSON")
            temp = (temp / 60) * 100
            percent = int(temp)
            self.safe_state_progress_bar.setValue(percent)
        
    def updateTempScale(self):
        selection = self.comboBox_temp.currentIndex()
        if selection == 0:
            tempScaleSet('f', TEMP_ADDR, device_list)
        else:
            tempScaleSet('c', TEMP_ADDR, device_list)
        time.sleep(.5)
        
    ###### CRITICAL NOTE: WATER LEVEL TEXT BOX ORIGINALY INTENDED FOR CO2
    ######      THUS WHEN WORKING WITH WATER LABEL AND TEXT OUTPUT
    ######      USE co2_text_out and label_co2 UNTIL REVISED
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_ph.setText(_translate("MainWindow", "PH"))
        self.dispense_button.setText(_translate("MainWindow", "Dispense"))
        self.comboBox_temp.setItemText(0, _translate("MainWindow", "Fahrenheit"))
        self.comboBox_temp.setItemText(1, _translate("MainWindow", "Celsius"))
        self.label_temp.setText(_translate("MainWindow", "Temperature"))
        self.label_safe.setText(_translate("MainWindow", "Safe"))
        self.label_co2.setText(_translate("MainWindow", "Water Level"))
        self.menuViews.setTitle(_translate("MainWindow", "Views"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionTank_Setup.setText(_translate("MainWindow", "Tank Setup"))
        self.actionShutdown.setText(_translate("MainWindow", "Shutdown"))
        self.actionGraphs.setText(_translate("MainWindow", "Graphs"))
        self.actionLights.setText(_translate("MainWindow", "Lights"))
        self.actionMain.setText(_translate("MainWindow", "Main"))
        self.actionCulture_Status.setText(_translate("MainWindow", "Culture Status"))
import icons_rc


if __name__ == "__main__":
    import sys
    PH_ADDR = "99"
    TEMP_ADDR = "102"
    PUMP_ADDR = "103"

    ## TODO: Make these values set by a set up function based on tank. maybe.
    PH_DANGER = 2
    PH_TRIGGER = 10
    PH_CO2_MIN = 10.3
    TEMP_MIN = 90
    TEMP_MAX = 101
    TEMP_IDEAL = 97
    
    TANK_HEIGHT = 400
    
    STATES = ('empty', 'first', 'second', 'final')
    state = STATES[0]
    safe_bool = False
    harvestable = False
    run = True

    device_list = get_devices()
    device = device_list[0]
    real_raw_input = vars(__builtins__).get('raw_input', input)
  
    try:
            saved_state_file = open("SaveState.txt")
            state = saved_state_file.read()
            saved_state_file.close()
    except IOError:
            saved_state_file = open("SaveState.txt", "w")
            state = STATES[0]
            saved_state_file.write(state)
            saved_state_file.close()
    finally:
            safe_bool = unsafe_state(safe_bool)
            ##Output culture state Verify and correct via user input
            
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.updateValues()
    MainWindow.show()
    sys.exit(app.exec_())
